{
	"info": {
		"_postman_id": "9644e885-01ec-44fd-ac5d-45d2b48bf4db",
		"name": "petclinic collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Get Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"secondAdmin\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password\");\r",
									"});\r",
									"pm.test(\"Check Booking\" , function () {\r",
									"    pm.expect (jsonData.owners).to.not.equal(null);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"secondAdmin\",\r\n    \"password\": \"password\",\r\n    \"enabled\": true,\r\n    \"roles\": [\r\n    \t{ \"name\" : \"OWNER_ADMIN\" }\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Owner Rest Controller",
			"item": [
				{
					"name": "petclinic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Betty\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Davis\");\r",
									"});\r",
									"pm.test(\"Check Booking\" , function () {\r",
									"    pm.expect (jsonData.owners).to.not.equal(null);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}owners",
							"host": [
								"{{url}}owners"
							]
						}
					},
					"response": []
				},
				{
					"name": "get pets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"var status_code = 200;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Get pets should have response\", function () {\r",
									"\r",
									"    pm.expect(jsonData.value).to.not.eq(null);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}pets",
							"host": [
								"{{url}}pets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"var url = pm.environment.get(\"url\") + \"/owners/\" +  pm.globals.get(\"newId\");\r",
									"\r",
									"const getRequest = {\r",
									"        url: url,\r",
									"        method: 'GET'\r",
									"};\r",
									"\r",
									"pm.globals.set(\"newId\", pm.response.json().id);\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Check the body is not empty\" , function () {\r",
									"    pm.expect (jsonData.owners).to.not.equal(null);\r",
									"});\r",
									"pm.test(\"Test owner Firstname is created\", function () {\r",
									"    pm.expect(jsonData.firstName).to.include(\"Wasim\");\r",
									"});\r",
									"pm.test(\"Test owner lastName is created \", function () {\r",
									"    pm.expect(jsonData.lastName).to.include(\"El-jomaa\");\r",
									"});\r",
									"pm.test(\"Test owner address is created \", function () {\r",
									"    pm.expect(jsonData.address).to.include(\"Sandspåret 11\");\r",
									"});\r",
									"pm.test(\"Test owner telephone is created\", function () {\r",
									"    pm.expect(jsonData.telephone).to.include(\"0760777716\");\r",
									"});\r",
									"pm.test(\"Test owner city is created \", function () {\r",
									"    pm.expect(jsonData.city).to.include(\"Angered\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n  \"address\": \"Sandspåret 11\",\r\n  \"city\": \"Angered\",\r\n  \"firstName\": \"Wasim\",\r\n  \"lastName\": \"El-jomaa\",\r\n  \"pets\": \r\n    [ \r\n        { \r\n      \"birthDate\": \"2010-04-16\",\r\n      \"id\": 0,\r\n      \"name\": \"Noa\",\r\n      \"type\": {\r\n    \r\n        \"name\": \"cat\",\r\n        \"id\": 1\r\n      },\r\n      \"visits\": \r\n        [{\r\n          \"date\": \"2021/04/10\",\r\n          \"id\": 0,\r\n          \"description\": \"not good\"\r\n          \r\n           }\r\n    ]\r\n    }\r\n    ],\r\n  \"telephone\": \"0760777716\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}owners",
							"host": [
								"{{url}}owners"
							]
						}
					},
					"response": []
				},
				{
					"name": "getOwner with iD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check the body is not empty\" , function () {\r",
									"    pm.expect (jsonData.owners).to.not.equal(null);\r",
									"});\r",
									"pm.test(\"Test owner Firstname \", function () {\r",
									"    pm.expect(jsonData.firstName).to.include(\"Wasim\");\r",
									"});\r",
									"pm.test(\"Test owner lastName \", function () {\r",
									"    pm.expect(jsonData.lastName).to.include(\"El-jomaa\");\r",
									"});\r",
									"pm.test(\"Test owner address \", function () {\r",
									"    pm.expect(jsonData.address).to.include(\"Sandspåret 11\");\r",
									"});\r",
									"pm.test(\"Test owner telephone \", function () {\r",
									"    pm.expect(jsonData.telephone).to.include(\"0760777716\");\r",
									"});\r",
									"pm.test(\"Test owner city \", function () {\r",
									"    pm.expect(jsonData.city).to.include(\"Angered\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}owners/{{newId}}",
							"host": [
								"{{url}}owners"
							],
							"path": [
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add pets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"var url = pm.environment.get(\"url\") + \"/pets/\" +  pm.globals.get(\"petsID\");\r",
									"\r",
									"const getRequest = {\r",
									"        url: url,\r",
									"        method: 'GET'\r",
									"};\r",
									"\r",
									"pm.globals.set(\"petsID\", pm.response.json().id);\r",
									"\r",
									"\r",
									"\r",
									"var status_code = 201;\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"\r",
									"pm.expect(pm.response.code).to.eql(201);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.status);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status should be OK\", () => {\r",
									"\r",
									"    pm.expect(1).to.eql(1);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test pets birthdata is created\", function () {\r",
									"    pm.expect(jsonData.birthDate).to.include(\"2010/09/07\");\r",
									"});\r",
									"pm.test(\"Test pets name  is created\", function () {\r",
									"    pm.expect(jsonData.name).to.include(\"Seyo\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 0,\r\n        \"name\": \"Seyo\",\r\n        \"birthDate\": \"2010/09/07\",\r\n        \"type\": {\r\n            \"id\": 1,\r\n            \"name\": \"cat\"\r\n        },\r\n        \"owner\": {\r\n            \"id\": {{newId}},\r\n            \"firstName\": \"Wasim\",\r\n            \"lastName\": \"Eljomaa\",\r\n            \"address\": \"Bergsgårdsgärdet 11\",\r\n            \"city\": \"Angered\",\r\n            \"telephone\": \"\"\r\n        },\r\n        \"visits\": []\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}pets",
							"host": [
								"{{url}}pets"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateOwner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": \"Bergsgårdsgärdet 11\",\r\n  \"city\": \"Angered\",\r\n  \"firstName\": \"jones\",\r\n \r\n  \"lastName\": \"lars\",\r\n  \r\n  \"telephone\": \"0760989878\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}owners/{{newId}}",
							"host": [
								"{{url}}owners"
							],
							"path": [
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"id\":{{petsID}} ,\r\n        \"name\": \"nano\",\r\n        \"birthDate\": \"2009/09/07\",\r\n        \"type\": {\r\n            \"id\": 1,\r\n            \"name\": \"cat\"\r\n        },\r\n        \"owner\": {\r\n            \"id\": {{newId}},\r\n            \"firstName\": \"Wassim\",\r\n            \"lastName\": \"El-jomaa\",\r\n            \"address\": \"Bergsgårdsgärdet 12\",\r\n            \"city\": \"Angered\",\r\n            \"telephone\": \"0760776616\"\r\n        },\r\n        \"visits\": []\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9966/petclinic/api/pets/{{petsID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9966",
							"path": [
								"petclinic",
								"api",
								"pets",
								"{{petsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get update Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check the body is not empty\" , function () {\r",
									"    pm.expect (jsonData.owners).to.not.equal(null);\r",
									"});\r",
									"pm.test(\"Test owner Firstname is updated\", function () {\r",
									"    pm.expect(jsonData.firstName).to.include(\"jones\");\r",
									"});\r",
									"pm.test(\"Test owner lastName is updated\", function () {\r",
									"    pm.expect(jsonData.lastName).to.include(\"lars\");\r",
									"});\r",
									"pm.test(\"Test owner address is updated\", function () {\r",
									"    pm.expect(jsonData.address).to.include(\"Bergsgårdsgärdet 11\");\r",
									"});\r",
									"pm.test(\"Test owner telephone is updated\", function () {\r",
									"    pm.expect(jsonData.telephone).to.include(\"0760989878\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}owners/{{newId}}",
							"host": [
								"{{url}}owners"
							],
							"path": [
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get uppdate pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check the body is not empty\" , function () {\r",
									"    pm.expect (jsonData.pets).to.not.equal(null);\r",
									"});\r",
									"pm.test(\"Test pets name is uppdate\", function () {\r",
									"    pm.expect(jsonData.name).to.include(\"nano\");\r",
									"});\r",
									"\r",
									"pm.test(\"Test pets birthDate is uppdate\", function () {\r",
									"    pm.expect(jsonData.birthDate).to.include(\"2009/09/07\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}pets/{{petsID}}",
							"host": [
								"{{url}}pets"
							],
							"path": [
								"{{petsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getOwnersList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Test if the firstName  is in the body \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"George\");\r",
									"});\r",
									"pm.test(\" Test if the lastname is in the body \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Franklin\");\r",
									"});\r",
									"pm.test(\"Check Booking\" , function () {\r",
									"    pm.expect (jsonData.owners).to.not.equal(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9966/petclinic/api/owners/*/lastname/Franklin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9966",
							"path": [
								"petclinic",
								"api",
								"owners",
								"*",
								"lastname",
								"Franklin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "delete Pets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}pets/{{petsID}}",
							"host": [
								"{{url}}pets"
							],
							"path": [
								"{{petsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteOwner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}owners/{{newId}}",
							"host": [
								"{{url}}owners"
							],
							"path": [
								"{{newId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}